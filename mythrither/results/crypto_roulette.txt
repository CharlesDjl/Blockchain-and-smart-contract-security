Compilation warnings/errors on ../sol_file/crypto_roulette.sol:
../sol_file/crypto_roulette.sol:39:9: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
        Game game;
        ^-------^
../sol_file/crypto_roulette.sol:33:30: Warning: "sha3" has been deprecated in favour of "keccak256"
        secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;
                             ^----------------------------------------^
../sol_file/crypto_roulette.sol:39:9: Warning: Uninitialized storage pointer. Did you mean '<type> memory game'?
        Game game;
        ^-------^
../sol_file/crypto_roulette.sol:55:13: Warning: "suicide" has been deprecated in favour of "selfdestruct"
            suicide(msg.sender);
            ^-----------------^

INFO:Detectors:
CryptoRoulette (../sol_file/crypto_roulette.sol#13-61) contract sets array length with a user-controlled value:
	- gamesPlayed.push(game) (../sol_file/crypto_roulette.sol#42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#array-length-assignment
INFO:Detectors:
CryptoRoulette.shuffle() (../sol_file/crypto_roulette.sol#31-34) uses a weak PRNG: "secretNumber = uint8(sha3()(now,block.blockhash(block.number - 1))) % 20 + 1 (../sol_file/crypto_roulette.sol#33)" 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#weak-PRNG
INFO:Detectors:
CryptoRoulette.play(uint256).game (../sol_file/crypto_roulette.sol#39) is a storage variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-storage-variables
INFO:Detectors:
CryptoRoulette.play(uint256) (../sol_file/crypto_roulette.sol#36-51) uses a dangerous strict equality:
	- number == secretNumber (../sol_file/crypto_roulette.sol#44)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
CryptoRoulette.play(uint256) (../sol_file/crypto_roulette.sol#36-51) uses timestamp for comparisons
	Dangerous comparisons:
	- number == secretNumber (../sol_file/crypto_roulette.sol#44)
CryptoRoulette.kill() (../sol_file/crypto_roulette.sol#53-57) uses timestamp for comparisons
	Dangerous comparisons:
	- msg.sender == ownerAddr && now > lastPlayed + 86400 (../sol_file/crypto_roulette.sol#54)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Deprecated standard detected secretNumber = uint8(sha3()(now,block.blockhash(block.number - 1))) % 20 + 1 (../sol_file/crypto_roulette.sol#33):
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected suicide(address)(msg.sender) (../sol_file/crypto_roulette.sol#55):
	- Usage of "suicide()" should be replaced with "selfdestruct()"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#deprecated-standards
INFO:Detectors:
Pragma version^0.4.19 (../sol_file/crypto_roulette.sol#4) allows old versions
solc-0.4.19 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Reentrancy in CryptoRoulette.play(uint256) (../sol_file/crypto_roulette.sol#36-51):
	External calls:
	- msg.sender.transfer(this.balance) (../sol_file/crypto_roulette.sol#46)
	State variables written after the call(s):
	- lastPlayed = now (../sol_file/crypto_roulette.sol#50)
	- shuffle() (../sol_file/crypto_roulette.sol#49)
		- secretNumber = uint8(sha3()(now,block.blockhash(block.number - 1))) % 20 + 1 (../sol_file/crypto_roulette.sol#33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-4
INFO:Detectors:
CryptoRoulette.betPrice (../sol_file/crypto_roulette.sol#17) should be constant 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:../sol_file/crypto_roulette.sol analyzed (1 contracts with 85 detectors), 12 result(s) found
分析时间：28.000186291 s
==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptoRoulette
Function name: gamesPlayed(uint256)
PC address: 454
Estimated Gas Usage: 987 - 1082
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ../sol_file/crypto_roulette.sol:24

Game[] public gamesPlayed

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: gamesPlayed(uint256), txdata: 0x382cf0a6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptoRoulette
Function name: kill()
PC address: 619
Estimated Gas Usage: 1859 - 2284
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ../sol_file/crypto_roulette.sol:54

lastPlayed + 1 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000459c058b0000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: play(uint256), txdata: 0x6898f82b, value: 0x16345785d8a0000
Caller: [CREATOR], function: kill(), txdata: 0x41c0e1b5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptoRoulette
Function name: kill()
PC address: 627
Estimated Gas Usage: 1839 - 2264
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ../sol_file/crypto_roulette.sol:54

if (msg.sender == ownerAddr && now > lastPlayed + 1 days) {
            suicide(msg.sender);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: kill(), txdata: 0x41c0e1b5, value: 0x0
