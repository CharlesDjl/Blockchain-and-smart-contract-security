INFO:Detectors:
Pragma version^0.4.24 (../sol_file/old_blockhash.sol#1) allows old versions
solc-0.4.24 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Struct PredictTheBlockHashChallenge.guess (../sol_file/old_blockhash.sol#7-10) is not in CapWords
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Slither:../sol_file/old_blockhash.sol analyzed (1 contracts with 85 detectors), 3 result(s) found
分析时间：14.469391390 s
==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: PredictTheBlockHashChallenge
Function name: settle()
PC address: 216
Estimated Gas Usage: 1039 - 1324
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ../sol_file/old_blockhash.sol:27

require(block.number > guesses[msg.sender].block)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001080440040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: PredictTheBlockHashChallenge
Function name: settle()
PC address: 442
Estimated Gas Usage: 8010 - 28865
A control flow decision is made based on The block hash of a previous block.
The block hash of a previous block is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ../sol_file/old_blockhash.sol:32

if (guesses[msg.sender].guess == answer) {
            msg.sender.transfer(2 ether);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001080440040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: PredictTheBlockHashChallenge
Function name: settle()
PC address: 498
Estimated Gas Usage: 8838 - 63879
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ../sol_file/old_blockhash.sol:33

msg.sender.transfer(2 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10c0002040002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000
Caller: [SOMEGUY], function: lockInGuess(bytes32), txdata: 0xed7f559c, value: 0xde0b6b3a7640000
Caller: [ATTACKER], function: settle(), txdata: 0x11da60b4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: PredictTheBlockHashChallenge
Function name: lockInGuess(bytes32)
PC address: 705
Estimated Gas Usage: 11382 - 52047
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ../sol_file/old_blockhash.sol:23

block.number + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0xde0b6b3a7640000
Caller: [CREATOR], function: lockInGuess(bytes32), txdata: 0xed7f559c, value: 0xde0b6b3a7640000
