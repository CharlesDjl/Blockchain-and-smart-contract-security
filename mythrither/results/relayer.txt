Compilation warnings/errors on ../sol_file/relayer.sol:
../sol_file/relayer.sol:33:22: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function execute(bytes memory _data) public {
                     ^----------------^
../sol_file/relayer.sol:33:5: Warning: Function state mutability can be restricted to pure
    function execute(bytes memory _data) public {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:
Relayer.relay(Target,bytes) (../sol_file/relayer.sol#19-28) compares to a boolean constant:
	-require(bool,string)(transactions[transactionId].executed == false,same transaction twice) (../sol_file/relayer.sol#21)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality
INFO:Detectors:
Pragma version^0.5.0 (../sol_file/relayer.sol#7) allows old versions
solc-0.5.0 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Relayer.relay(Target,bytes) (../sol_file/relayer.sol#19-28):
	- (success) = address(target).call(abi.encodeWithSignature(execute(bytes),_data)) (../sol_file/relayer.sol#26)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Parameter Relayer.relay(Target,bytes)._data (../sol_file/relayer.sol#19) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
relay(Target,bytes) should be declared external:
	- Relayer.relay(Target,bytes) (../sol_file/relayer.sol#19-28)
Moreover, the following function parameters should change its data location:
_data location should be calldata
execute(bytes) should be declared external:
	- Target.execute(bytes) (../sol_file/relayer.sol#33-35)
Moreover, the following function parameters should change its data location:
_data location should be calldata
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external
INFO:Slither:../sol_file/relayer.sol analyzed (2 contracts with 85 detectors), 7 result(s) found
分析时间：65.484329574 s
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Relayer
Function name: relay(address,bytes)
PC address: 966
Estimated Gas Usage: 23492 - 124267
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ../sol_file/relayer.sol:26

address(target).call(abi.encodeWithSignature("execute(bytes)", _data))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: relay(address,bytes), txdata: 0xc28e83fd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef', ''), value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: Relayer
Function name: relay(address,bytes)
PC address: 966
Estimated Gas Usage: 23492 - 124267
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: ../sol_file/relayer.sol:26

address(target).call(abi.encodeWithSignature("execute(bytes)", _data))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: relay(address,bytes), txdata: 0xc28e83fd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c, decoded_data: ('0x0000000000000000000000000000000000000000', ''), value: 0x0
Caller: [ATTACKER], function: relay(address,bytes), txdata: 0xc28e83fd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, decoded_data: ('0x0000000000000000000000000000000000000000', ''), value: 0x0
