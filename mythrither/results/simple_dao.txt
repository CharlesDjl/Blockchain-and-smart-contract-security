Compilation warnings/errors on ../sol_file/simple_dao.sol:
../sol_file/simple_dao.sol:6:1: Error: Source file requires different compiler version (current compiler is 0.4.22+commit.4cb486ee.Linux.g++ - note that nightly builds are considered to be strictly less than the released version
pragma solidity 0.4.24;
^---------------------^

Traceback (most recent call last):
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 561, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/slither_analyzer-0.9.3-py3.10.egg/slither/__main__.py", line 837, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/slither_analyzer-0.9.3-py3.10.egg/slither/__main__.py", line 90, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 643, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 131, in __init__
    self._compile(**kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 553, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 156, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 285, in _get_targets_json
    return _run_solc(
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 565, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation ../sol_file/simple_dao.sol:6:1: Error: Source file requires different compiler version (current compiler is 0.4.22+commit.4cb486ee.Linux.g++ - note that nightly builds are considered to be strictly less than the released version
pragma solidity 0.4.24;
^---------------------^

ERROR:root:Error in ../sol_file/simple_dao.sol
ERROR:root:Traceback (most recent call last):
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 561, in _run_solc
    ret: Dict = json.loads(stdout)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/slither_analyzer-0.9.3-py3.10.egg/slither/__main__.py", line 837, in main_impl
    ) = process_all(filename, args, detector_classes, printer_classes)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/slither_analyzer-0.9.3-py3.10.egg/slither/__main__.py", line 90, in process_all
    compilations = compile_all(target, **vars(args))
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 643, in compile_all
    compilations.append(CryticCompile(target, **kwargs))
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 131, in __init__
    self._compile(**kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/crytic_compile.py", line 553, in _compile
    self._platform.compile(self, **kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 156, in compile
    targets_json = _get_targets_json(compilation_unit, self._target, **kwargs)
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 285, in _get_targets_json
    return _run_solc(
  File "/home/charlesdjl/miniconda3/envs/slither/lib/python3.10/site-packages/crytic_compile-0.3.1-py3.10.egg/crytic_compile/platform/solc.py", line 565, in _run_solc
    raise InvalidCompilation(f"Invalid solc compilation {stderr}")
crytic_compile.platform.exceptions.InvalidCompilation: Invalid solc compilation ../sol_file/simple_dao.sol:6:1: Error: Source file requires different compiler version (current compiler is 0.4.22+commit.4cb486ee.Linux.g++ - note that nightly builds are considered to be strictly less than the released version
pragma solidity 0.4.24;
^---------------------^


分析时间：25.045199269 s
==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SimpleDAO
Function name: withdraw(uint256)
PC address: 565
Estimated Gas Usage: 7831 - 62492
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ../sol_file/simple_dao.sol:17

msg.sender.call.value(amount)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SimpleDAO
Function name: withdraw(uint256)
PC address: 565
Estimated Gas Usage: 7831 - 62492
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ../sol_file/simple_dao.sol:17

msg.sender.call.value(amount)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000007ff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [CREATOR], function: donate(address), txdata: 0x00362a95000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, decoded_data: ('0xdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef',), value: 0x1
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000001, decoded_data: (1,), value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SimpleDAO
Function name: withdraw(uint256)
PC address: 648
Estimated Gas Usage: 7831 - 62492
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../sol_file/simple_dao.sol:18

credit[msg.sender]-=amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SimpleDAO
Function name: withdraw(uint256)
PC address: 655
Estimated Gas Usage: 7831 - 62492
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ../sol_file/simple_dao.sol:18

credit[msg.sender]-=amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d, value: 0x0
