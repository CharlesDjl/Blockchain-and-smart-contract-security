Running time: 2.950983976 seconds

pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 277, in main
    matches.extend(pattern.find_matches())
  File "/sec/securify/analyses/patterns/static/static_analysis_patterns.py", line 73, in find_matches
    static = analysis_context.static_analysis
  File "/sec/securify/analyses/analysis.py", line 88, in static_analysis
    self._static = self.config.static_analysis(self)
  File "securify/__main__.py", line 255, in <lambda>
    static_analysis=lambda t: static_analysis.analyze_cfg(t.cfg, **souffle_config),
  File "/sec/securify/analyses/analysis.py", line 81, in cfg
    self._cfg = self.config.cfg_compiler(self)
  File "securify/__main__.py", line 254, in <lambda>
    cfg_compiler=lambda t: solidity_cfg_compiler.compile_cfg(t.ast).cfg,
  File "/sec/securify/analyses/analysis.py", line 74, in ast
    self._ast = self.config.ast_compiler(self)
  File "securify/__main__.py", line 253, in <lambda>
    ast_compiler=lambda t: solidity_ast_compiler.compile_ast(t.source_file),
  File "/sec/securify/solidity/solidity_ast_compiler.py", line 31, in compile_ast
    compile_output = compile_standard(compile_input, allow_paths='/')
  File "/usr/local/lib/python3.7/dist-packages/py_solc-3.2.0-py3.7.egg/solc/main.py", line 181, in compile_standard
    message=error_message,
solc.exceptions.SolcError: fixed_pragma.sol:12:5: SyntaxError: Functions are not allowed to have the same name as the contract. If you intend this to be a constructor, use "constructor(...) { ... }" to define it.
    function GuessTheRandomNumberChallenge() public payable {
    ^ (Relevant source part starts here and spans across multiple lines).

fixed_pragma.sol:14:24: TypeError: Wrong argument count for function call: 2 arguments given but expected 1. This function requires a single bytes argument. Use abi.encodePacked(...) to obtain the pre-0.5.0 behaviour or abi.encode(...) to use ABI encoding.
        answer = uint8(keccak256(block.blockhash(block.number - 1), now));
                       ^-----------------------------------------------^

fixed_pragma.sol:14:18: TypeError: Explicit type conversion not allowed from "bytes32" to "uint8".
        answer = uint8(keccak256(block.blockhash(block.number - 1), now));
                 ^------------------------------------------------------^

        > command: `solc --allow-paths / --standard-json`
        > return code: `0`
        > stderr:
        {"errors":[{"component":"general","formattedMessage":"fixed_pragma.sol:12:5: SyntaxError: Functions are not allowed to have the same name as the contract. If you intend this to be a constructor, use \"constructor(...) { ... }\" to define it.
    function GuessTheRandomNumberChallenge() public payable {
    ^ (Relevant source part starts here and spans across multiple lines).
","message":"Functions are not allowed to have the same name as the contract. If you intend this to be a constructor, use \"constructor(...) { ... }\" to define it.","severity":"error","sourceLocation":{"end":384,"file":"fixed_pragma.sol","start":207},"type":"SyntaxError"},{"component":"general","formattedMessage":"fixed_pragma.sol:12:5: Warning: This declaration shadows an existing declaration.
    function GuessTheRandomNumberChallenge() public payable {
    ^ (Relevant source part starts here and spans across multiple lines).
fixed_pragma.sol:9:1: The shadowed declaration is here:
contract GuessTheRandomNumberChallenge {
^ (Relevant source part starts here and spans across multiple lines).
","message":"This declaration shadows an existing declaration.","secondarySourceLocations":[{"end":662,"file":"fixed_pragma.sol","message":"The shadowed declaration is here:","start":143}],"severity":"warning","sourceLocation":{"end":384,"file":"fixed_pragma.sol","start":207},"type":"Warning"},{"component":"general","formattedMessage":"fixed_pragma.sol:14:24: TypeError: Wrong argument count for function call: 2 arguments given but expected 1. This function requires a single bytes argument. Use abi.encodePacked(...) to obtain the pre-0.5.0 behaviour or abi.encode(...) to use ABI encoding.
        answer = uint8(keccak256(block.blockhash(block.number - 1), now));
                       ^-----------------------------------------------^
","message":"Wrong argument count for function call: 2 arguments given but expected 1. This function requires a single bytes argument. Use abi.encodePacked(...) to obtain the pre-0.5.0 behaviour or abi.encode(...) to use ABI encoding.","severity":"error","sourceLocation":{"end":376,"file":"fixed_pragma.sol","start":327},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:14:18: TypeError: Explicit type conversion not allowed from \"bytes32\" to \"uint8\".
        answer = uint8(keccak256(block.blockhash(block.number - 1), now));
                 ^------------------------------------------------------^
","message":"Explicit type conversion not allowed from \"bytes32\" to \"uint8\".","severity":"error","sourceLocation":{"end":377,"file":"fixed_pragma.sol","start":321},"type":"TypeError"}],"sources":{}}

        > stdout:
