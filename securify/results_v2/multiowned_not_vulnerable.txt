Running time: 2.920978480 seconds

Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 277, in main
    matches.extend(pattern.find_matches())
  File "/sec/securify/analyses/patterns/static/static_analysis_patterns.py", line 73, in find_matches
    static = analysis_context.static_analysis
  File "/sec/securify/analyses/analysis.py", line 88, in static_analysis
    self._static = self.config.static_analysis(self)
  File "securify/__main__.py", line 255, in <lambda>
    static_analysis=lambda t: static_analysis.analyze_cfg(t.cfg, **souffle_config),
  File "/sec/securify/analyses/analysis.py", line 81, in cfg
    self._cfg = self.config.cfg_compiler(self)
  File "securify/__main__.py", line 254, in <lambda>
    cfg_compiler=lambda t: solidity_cfg_compiler.compile_cfg(t.ast).cfg,
  File "/sec/securify/analyses/analysis.py", line 74, in ast
    self._ast = self.config.ast_compiler(self)
  File "securify/__main__.py", line 253, in <lambda>
    ast_compiler=lambda t: solidity_ast_compiler.compile_ast(t.source_file),
  File "/sec/securify/solidity/solidity_ast_compiler.py", line 31, in compile_ast
    compile_output = compile_standard(compile_input, allow_paths='/')
  File "/usr/local/lib/python3.7/dist-packages/py_solc-3.2.0-py3.7.egg/solc/main.py", line 181, in compile_standard
    message=error_message,
solc.exceptions.SolcError: fixed_pragma.sol:49:3: SyntaxError: No visibility specified. Did you intend to add "public"?
  function withdrawAll() onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).

fixed_pragma.sol:53:3: SyntaxError: No visibility specified. Did you intend to add "external"?
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).

fixed_pragma.sol:53:3: TypeError: Fallback function must be defined as "external".
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).

fixed_pragma.sol:23:13: TypeError: Operator != not compatible with types address and int_const 0
    require(owners[msg.sender] != 0);
            ^---------------------^

fixed_pragma.sol:32:13: TypeError: Operator != not compatible with types address and int_const 0
    require(_owner != 0);
            ^---------^

fixed_pragma.sol:41:46: TypeError: Operator != not compatible with types address and int_const 0
    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));
                                             ^-----------------^

fixed_pragma.sol:42:22: TypeError: Type int_const 0 is not implicitly convertible to expected type address.
    owners[_owner] = 0;
                     ^

fixed_pragma.sol:50:25: TypeError: Member "balance" not found or not visible after argument-dependent lookup in contract TestContract. Use "address(this).balance" to access this address member.
    msg.sender.transfer(this.balance);
                        ^----------^

        > command: `solc --allow-paths / --standard-json`
        > return code: `0`
        > stderr:
        {"errors":[{"component":"general","formattedMessage":"fixed_pragma.sol:49:3: SyntaxError: No visibility specified. Did you intend to add \"public\"?
  function withdrawAll() onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
","message":"No visibility specified. Did you intend to add \"public\"?","severity":"error","sourceLocation":{"end":1149,"file":"fixed_pragma.sol","start":1072},"type":"SyntaxError"},{"component":"general","formattedMessage":"fixed_pragma.sol:53:3: SyntaxError: No visibility specified. Did you intend to add \"external\"?
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
","message":"No visibility specified. Did you intend to add \"external\"?","severity":"error","sourceLocation":{"end":1177,"file":"fixed_pragma.sol","start":1153},"type":"SyntaxError"},{"component":"general","formattedMessage":"fixed_pragma.sol:53:3: TypeError: Fallback function must be defined as \"external\".
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
","message":"Fallback function must be defined as \"external\".","severity":"error","sourceLocation":{"end":1177,"file":"fixed_pragma.sol","start":1153},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:23:13: TypeError: Operator != not compatible with types address and int_const 0
    require(owners[msg.sender] != 0);
            ^---------------------^
","message":"Operator != not compatible with types address and int_const 0","severity":"error","sourceLocation":{"end":507,"file":"fixed_pragma.sol","start":484},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:32:13: TypeError: Operator != not compatible with types address and int_const 0
    require(_owner != 0);
            ^---------^
","message":"Operator != not compatible with types address and int_const 0","severity":"error","sourceLocation":{"end":714,"file":"fixed_pragma.sol","start":703},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:41:46: TypeError: Operator != not compatible with types address and int_const 0
    require(owners[_owner] == msg.sender || (owners[_owner] != 0 && msg.sender == root));
                                             ^-----------------^
","message":"Operator != not compatible with types address and int_const 0","severity":"error","sourceLocation":{"end":953,"file":"fixed_pragma.sol","start":934},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:42:22: TypeError: Type int_const 0 is not implicitly convertible to expected type address.
    owners[_owner] = 0;
                     ^
","message":"Type int_const 0 is not implicitly convertible to expected type address.","severity":"error","sourceLocation":{"end":1001,"file":"fixed_pragma.sol","start":1000},"type":"TypeError"},{"component":"general","formattedMessage":"fixed_pragma.sol:50:25: TypeError: Member \"balance\" not found or not visible after argument-dependent lookup in contract TestContract. Use \"address(this).balance\" to access this address member.
    msg.sender.transfer(this.balance);
                        ^----------^
","message":"Member \"balance\" not found or not visible after argument-dependent lookup in contract TestContract. Use \"address(this).balance\" to access this address member.","severity":"error","sourceLocation":{"end":1143,"file":"fixed_pragma.sol","start":1131},"type":"TypeError"}],"sources":{}}

        > stdout:
pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
